Got it‚Äîhere‚Äôs exactly what the Replit Agent needs, plus what I verified inside the files you sent.

What I checked in your upload
	‚Ä¢	client/index.html no longer contains the auto-reload listeners. ‚úîÔ∏è
It now only registers /sw.js and optionally calls reg.update().
	‚Ä¢	client/sw.js is using a proper Network-First for navigations with a cached /index.html fallback, navigationPreload, and cache cleanup in activate. ‚úîÔ∏è
Cache name is bumped: fitcircle-v4-2025-10-02.

This is the correct setup and should eliminate the white screen race.

‚∏ª

Answer to the Agent‚Äôs question

Yes ‚Äî remove the two auto-reload listeners from index.html.
Those were:
	‚Ä¢	updatefound ‚Üí window.location.reload()
	‚Ä¢	global controllerchange ‚Üí window.location.reload()

Your React hook should be the only logic that triggers a reload. Having multiple listeners causes double reloads and can land the app between SW versions.

‚∏ª

Tuned navigation strategy (final)

Use the implementation already present in client/sw.js (summarized):
	‚Ä¢	Precache the shell: ['/', '/index.html', '/manifest.json', '/icon-192.png', '/icon-512.png']
	‚Ä¢	Install: cache.addAll(SHELL_URLS)
	‚Ä¢	Activate: clients.claim(), enable navigationPreload, then delete old caches
	‚Ä¢	Navigations (mode==='navigate'):
	‚Ä¢	Try event.preloadResponse or fetch(req)
	‚Ä¢	If OK & HTML, event.waitUntil(cache.put('/index.html', clone))
	‚Ä¢	On error, fallback to cached /index.html
	‚Ä¢	Assets (js/css): cache-first (only cache resp.ok)
	‚Ä¢	Images: cache-first with network fallback
	‚Ä¢	Never cache non-OK/redirect HTML as shell

This matches the sw.js you provided and prevents white screens during SW updates.

‚∏ª

Deploy + refresh sequence (do this to flush the old behavior)
	1.	Deploy the current build (with CACHE_NAME = fitcircle-v4-2025-10-02).
	2.	On each test device:
	‚Ä¢	Fully quit the PWA (swipe it away).
	‚Ä¢	Re-open once ‚Üí the old SW serves the old shell while the new SW installs & sits waiting.
	‚Ä¢	Tap your Update button (which posts SKIP_WAITING), your hook waits for controllerchange, then one reload happens.
	3.	Verify in DevTools (Application ‚Üí Service Workers):
	‚Ä¢	Status: activated and is running, scope /.
	‚Ä¢	Only one reload occurs.
	‚Ä¢	Network shows index.html and bundle files are 200/304 (no 404s).

‚∏ª

If anyone still sees a white screen

It‚Äôs usually one of these‚Äîand the fixes are already covered by your new files:
	‚Ä¢	A stale SW still registered under a different scope.
‚ûú In DevTools, Unregister old SWs, or open /sw.js directly and refresh.
	‚Ä¢	Old cache not deleted.
‚ûú Bumping CACHE_NAME (already done) + cleanup in activate handles this.
	‚Ä¢	Reload happened before controllerchange.
‚ûú You removed the conflicting listeners; the hook now controls this path.
	‚Ä¢	Cached error page as shell.
‚ûú Your fetch handler only caches resp.ok HTML to /index.html‚Äîgood.

‚∏ª

One tiny polish for the Agent (optional)

In the nav handler, add ignoreSearch: true to the success match as well (you already do this for the fallback):

// When matching the cached shell, prefer ignoreSearch for SPA routes
await c.match('/index.html', { ignoreSearch: true })

(You‚Äôre already doing it on the fallback path, so this is just consistency.)

‚∏ª

TL;DR for Replit Agent
	‚Ä¢	‚úÖ Keep the current sw.js (v4) exactly as in the package.
	‚Ä¢	‚úÖ Keep the simplified index.html registration (no auto reload listeners).
	‚Ä¢	üöÄ Deploy, hard close the PWA, reopen, press Update once ‚Üí expect a single reload and no white screen.